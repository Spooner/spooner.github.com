#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can't match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. "/about/" for the file
#   "content/about.html"). To select all children, grandchildren, ... of an
#   item, use the pattern "/about/*/"; "/about/*" will also select the parent,
#   because "*" matches zero or more characters.

compile '/*/feed_private/' do
  filter :erb
end

compile '/sitemap/' do
  filter :erb
end

compile '/style/*/' do
  case item[:extension]
    when 'sass'
      filter :sass, :syntax => :sass, :style => :compact
    when 'scss'
      filter :sass, :syntax => :scss, :style => :compact
    else
      raise "bad style extension #{item[:extension]}"
  end
end

compile '*' do
  if item.binary?
    # don't filter binary items
  else
    case item[:extension]
      when 'md'
        # Filter through kramdown without generating heading IDs.
        filter :kramdown

        layout item.layout if item.layout

        if item.article?
          filter :colorize_syntax, colorizers: { ruby: :coderay }
        end
    end

    layout 'default'
  end
end

# --------------------------------------------------

route '/*/feed_private/' do
  rep.item.identifier + 'index.xml'
end

route '/blog/_posts/*/' do
  item.identifier =~ %r[(\d{4})-(\d{2})-(\d{2})_(.+)/$]
  year, month, day, title = $1, $2, $3, $4

  # Ensure that the created_at is consistent with the name of the file.
  raise unless year.to_i == item.year
  raise unless month.to_i == item.month
  raise unless day.to_i == item.day

  "/#{year}/#{month}/#{title}/index.html"
end

route '/*/*/releases/*/' do
  "/#{item.year}/#{item.month.to_s.rjust(2, '0')}/#{item.full_title.downcase.tr(' .', '-_')}/index.html"
end

route '/sitemap/' do
  '/sitemap.xml'
end

route '/style/*/' do
  item.identifier.chop + '.css' # so that the /assets/style/screen/ item is compiled to /assets/style/screen.css
end

route "/errors/404/" do
  "/404.html"
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

# -----------------------------------
# Ugly is required, lest code blocks don't indent properly.
layout '*', :haml, format: :html5, ugly: true


# -------------------------------
preprocess do
  if defined? Nanoc3::CLI
    Nanoc3::CLI::Logger::ACTION_COLORS[:delete] = "\e[1m" + "\e[31m" # bold + red
    Nanoc3::CLI::Logger::ACTION_COLORS[:generate] = "\e[1m" + "\e[36m" # bold + cyan

    Nanoc3::CLI::Logger.instance.color = true
  end

  def log(message, type = nil)
    return unless defined? Nanoc3::CLI

    if type
      Nanoc3::CLI::Logger.instance.file(:high, type, message)
    else
      Nanoc3::CLI::Logger.instance.log(:high, message)
    end
  end

  def create_years_and_months
    log "Creating years and months..."

    # year => latest mtime of articles in that year
    years =  Hash.new  {|h, k| h[k] = Time.new 0 }
    # [year, month] => latest mtime of articles in that month
    months = Hash.new {|h, k| h[k] = Time.new 0 }

    sorted_articles.each do |article|
      year, month = article.year, article.month

      if article.mtime > years[year]
        years[year] = article.mtime
      end

      if article.mtime > months[[year, month]]
        months[[year, month]] = article.mtime
      end
    end

    years.each_pair do |year, mtime|
      identifier = "/#{year}/"
      @items << Nanoc3::Item.new(
          "",
          {
              title: year.to_s,
              layout: 'year',
              count_comments: true,
              extension: 'md',
              articles_shown: "sorted_news",
              #filter_articles: true,
              mtime: mtime,
          },
          identifier
      )

      log identifier, :generate
    end

    months.each_pair do |(year, month), mtime|
      month_name = Date::MONTHNAMES[month]
      identifier = "/#{year}/#{month.to_s.rjust(2, '0')}/"

      @items << Nanoc3::Item.new(
          "",
          {
              title: month_name,
              full_title: "#{month_name} #{year}",
              layout: 'month',
              count_comments: true,
              extension: 'md',
              mtime: mtime,
          },
          identifier
      )
      log identifier, :generate
    end
  end

  # http://www.h3rald.com/articles/take-back-your-site-with-nanoc/
  def create_tags
    log "Creating tags..."

    # Collect tag and page data
    # tag_name => { :count, :mtime }
    tags = Hash.new {|h, k| h[k] = { count: 0, mtime: Time.new(0)} }

    sorted_articles.each do |article|
      article.attributes[:tags].each do |tag|

        tags[tag][:count] += 1

        if article.mtime > tags[tag][:mtime]
          tags[tag][:mtime] = article.mtime
        end
      end
    end

    # Calculate the relative font size to render the tag at.
    min_tag_count, max_tag_count = tags.values.map {|d| d[:count] }.minmax
    tag_count_range = max_tag_count - min_tag_count

    # Write pages.
    tags.each_pair do |tag, data|
      # 0 to 1 for smallest to largest.
      tag_size = (data[:count] - min_tag_count) / tag_count_range.to_f
      identifier = "/tags/#{tag}/"
      @items << Nanoc3::Item.new(
          '',
          {
              title: tag,
              layout: 'tag',
              count: data[:count],
              count_comments: true,
              extension: 'md',
              font_size: tag_size,
              mtime: data[:mtime],
          },
          identifier
      )

      log identifier, :generate
    end
  end

  # A few pages need identical versions filtered by article type.
  def create_article_filters
    log "Creating filtered versions of article pages..."

    @items.select {|i| i[:filter_articles] }.each do |index|
      {
          blog: ["spooner_blog", "Blog", "sorted_blog_posts"],
          releases: ["spooner_releases", "Releases", "sorted_releases"]
      }.each_pair do |filter, (feed, title, articles)|
        identifier = "#{index.identifier}#{filter}/"
        @items << Nanoc3::Item.new(
            index.raw_content,
            index.attributes.merge(
              title: title,
              nav_title: "#{title} only",
              feed_url: "http://feeds.feedburner.com/#{feed}",
              articles_shown: articles,
              filtered: true
            ),
            identifier
        )

        log identifier, :generate
      end

    end
  end

  def remove_drafts
    log "Removing draft pages..."
    @items.delete_if do |item|
      if item.identifier =~ %r[_draft/$]
        log item.identifier, :delete
        true
      else
        false
      end
    end
  end

  puts

  remove_drafts
  create_tags
  create_years_and_months
  create_article_filters

  log "Compiling..."
end